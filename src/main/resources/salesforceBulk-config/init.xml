<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<template name="init" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="apiUrl" description="API Url to access the endpoint."/>
    <parameter name="tokenEndpointHostname" description="Instance url for OAuth 2.0 token endpoint when issuing authentication requests in your application."/>
    <parameter name="accessToken" description="Access token of the organizational account."/>
    <parameter name="apiVersion" description="Version of salesforce API."/>
    <parameter name="refreshToken" description="value of the refresh token."/>
    <parameter name="clientSecret"
               description="Value of your Consumer Secret given when you registered your application with salesforce."/>
    <parameter name="clientId"
               description="Value of your Consumer Key given when you registered your application with salesforce."/>
    <parameter name="registryPath"
               description="Registry Path of the Connector where the values are stored"/>
    <parameter name="intervalTime" description="The Interval time to check the accessToken validity"/>
    <sequence>
        <property name="uri.var.apiUrl" expression="$func:apiUrl"/>
        <property name="uri.var.tokenEndpointHostname" expression="$func:tokenEndpointHostname"/>
        <property name="uri.var.accessToken" expression="$func:accessToken"/>
        <property name="uri.var.apiVersion" expression="$func:apiVersion"/>
        <property name="uri.var.refreshToken" expression="$func:refreshToken"/>
        <property name="uri.var.clientSecret" expression="$func:clientSecret"/>
        <property name="uri.var.clientId" expression="$func:clientId"/>
        <property name="uri.var.registryPath" expression="$func:registryPath"/>
        <property name="uri.var.intervalTime" expression="$func:intervalTime"/>
        <!-- Append the common URL's string with API URL. -->
        <property name="uri.var.apiUrl"
                  expression="fn:concat(get-property('uri.var.apiUrl'),'/services/async/',get-property('uri.var.apiVersion'))"/>
        <filter source="boolean($ctx:uri.var.tokenEndpointHostname)" regex="false">
            <then>
                <property name="uri.var.tokenEndpointHostname" value="https://login.salesforce.com"/>
            </then>
        </filter>
        <property name="uri.var.tokenEndpointUrl"
                  expression="fn:concat(get-property('uri.var.tokenEndpointHostname'),'/services/oauth2/token')"/>
        <filter source="boolean($ctx:uri.var.refreshToken) and boolean($ctx:uri.var.clientSecret) and boolean($ctx:uri.var.clientId) and boolean($ctx:uri.var.accessToken)"
                regex="true">
            <then>
                <filter source="boolean($ctx:uri.var.intervalTime)" regex="false">
                    <then>
                        <property name="uri.var.intervalTime" value="3000000"/>
                    </then>
                </filter>
                <filter source="boolean(get-property('uri.var.registryPath'))" regex="true">
                    <then>
                        <property name="uri.var.accessTokenRegistryPath"
                                  expression="fn:concat($ctx:uri.var.registryPath, '/accessToken' )"/>
                        <property name="uri.var.timeRegistryPath"
                                  expression="fn:concat($ctx:uri.var.registryPath, '/time' )"/>
                    </then>
                </filter>
                <property name="uri.var.accessToken.reg"
                          expression="get-property('registry', $ctx:uri.var.accessTokenRegistryPath)"/>
                <property name="systemTime" expression="get-property('SYSTEM_TIME')" scope="default"/>
                <filter source="$ctx:uri.var.accessToken.reg=''" regex="true">
                    <then>
                        <script language="js">
                            <![CDATA[
                           importPackage(Packages.org.apache.synapse.config);
                           var newAccess = mc.getProperty('uri.var.accessToken');
                           var newAccessRegistryPath = mc.getProperty('uri.var.accessTokenRegistryPath');
                           var newSysTime = mc.getProperty('systemTime');
                           var newTimeRegistryPath = mc.getProperty('uri.var.timeRegistryPath');
                           if(newAccess != null && newAccess != ''){
                               //Create the registry entry if no such entry exists.
                               mc.getConfiguration().getRegistry().newResource(newAccessRegistryPath,false);
                               mc.getConfiguration().getRegistry().updateResource(newAccessRegistryPath,newAccess);
                               mc.getConfiguration().getRegistry().newResource(newTimeRegistryPath, false);
                               mc.getConfiguration().getRegistry().updateResource(newTimeRegistryPath, newSysTime);
                           }
                           ]]>
                        </script>
                    </then>
                    <else>
                        <property name="uri.var.accessToken"
                                  expression="$ctx:uri.var.accessToken.reg"/>
                    </else>
                </filter>
                <property name="registryTime"
                          expression="get-property('registry', $ctx:uri.var.timeRegistryPath)"/>
                <script language="js"><![CDATA[
                    var time1 = mc.getProperty("systemTime");
                    var time2 = mc.getProperty("registryTime");
                    var timeTaken = time1 - time2;
                    mc.setProperty("INTERVAL_TIME", timeTaken);
                   ]]>
                </script>
                <!--If the access token is not in the registry(first call) or time interval less than 50 minutes , then get a new access token by calling getAccessTokenByRefreshToken method and store the time into registry-->
                <filter source="$ctx:INTERVAL_TIME &gt;$ctx:uri.var.intervalTime or $ctx:uri.var.accessToken=''"
                        regex="true">
                    <then>
                        <salesforcebulk.getAccessTokenByRefreshToken/>
                    </then>
                </filter>
            </then>
        </filter>
        <header name="X-SFDC-Session" expression="get-property('uri.var.accessToken')" scope="transport"/>
    </sequence>
</template>